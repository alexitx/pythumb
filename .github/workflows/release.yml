name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.10'
  PYINSTALLER_VERSION: '4.9'

jobs:
  prepare:
    name: Prepare release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -U setuptools wheel

      - name: Get version
        id: version
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"
          project_version="$(python setup.py --version)"

          if [ "$tag_version" != "$project_version" ]; then
            echo "Version mismatch"
            echo "Tag version: $tag_version"
            echo "Project version: $project_version"
            exit 1
          fi

          echo "::set-output name=version::$tag_version"

      - name: Get changelog
        id: changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.version.outputs.version }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_windows:
    name: Build Windows binaries
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install base dependencies
        shell: bash
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel

      - name: Install package
        shell: bash
        run: python -m pip install .

      - name: Clone PyInstaller repository
        uses: actions/checkout@v2
        with:
          repository: pyinstaller/pyinstaller
          ref: v${{ env.PYINSTALLER_VERSION }}
          path: temp/pyinstaller/

      - name: Compile PyInstaller bootloader
        shell: bash
        run: |
          cd temp/pyinstaller/bootloader/
          python ./waf all

      - name: Install PyInstaller
        shell: bash
        run: |
          cd temp/pyinstaller/
          python -m pip install .

      - name: Install UPX
        id: upx
        shell: bash
        run: |
          url="https://github.com/upx/upx/releases/download/v3.96/upx-3.96-win64.zip"
          upx_dir="upx-3.96-win64"
          archive="${upx_dir}.zip"
          install_dir="/c/upx"
          temp_dir="$(mktemp -d)"

          mkdir -p "$install_dir"
          curl -LSso "$temp_dir/$archive" "$url"
          7z x -o"$temp_dir" "$temp_dir/$archive"
          mv "$temp_dir/$upx_dir"/* "$install_dir"

          echo "::set-output name=upx_path::$install_dir"

      - name: Build binaries
        id: build
        shell: bash
        run: |
          PATH="${{ steps.upx.outputs.upx_path }}:$PATH"

          release_name="pythumb-${{ needs.prepare.outputs.version }}-win-x64"
          archive="${release_name}.zip"

          ./scripts/build.sh win

          mkdir -p "release/$release_name/"
          cp pyi-dist/* LICENSE NOTICE "release/$release_name/"
          cd release/
          7z a -tzip -mx9 "$archive" "$release_name/"

          echo "::set-output name=archive::$archive"

      - name: Upload binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: release/${{ steps.build.outputs.archive }}
          asset_name: ${{ steps.build.outputs.archive }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux:
    name: Build Linux binaries
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install base dependencies
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -U setuptools wheel

      - name: Install package
        run: python3 -m pip install .

      - name: Install UPX
        id: upx
        run: |
          url="https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz"
          upx_dir="upx-3.96-amd64_linux"
          archive="${upx_dir}.tar.xz"
          install_dir="$HOME/upx"
          temp_dir="$(mktemp -d)"

          mkdir -p "$install_dir"
          curl -LSso "$temp_dir/$archive" "$url"
          tar -xf "$temp_dir/$archive" -C "$temp_dir"
          mv "$temp_dir/$upx_dir"/* "$install_dir"

          echo "::set-output name=upx_path::$install_dir"

      - name: Build binaries
        id: build
        run: |
          PATH="${{ steps.upx.outputs.upx_path }}:$PATH"

          release_name="pythumb-${{ needs.prepare.outputs.version }}-linux-x64"
          archive="${release_name}.tar.xz"

          chmod +x scripts/*.sh
          ./scripts/build.sh linux

          mkdir -p "release/$release_name/"
          cp pyi-dist/* LICENSE NOTICE "release/$release_name/"
          cd release/
          tar -cf - "$release_name/" | xz -zc9 - > "$archive"

          echo "::set-output name=archive::$archive"

      - name: Upload binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: release/${{ steps.build.outputs.archive }}
          asset_name: ${{ steps.build.outputs.archive }}
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_dist:
    name: Build Python distribution
    needs: [prepare, build_windows, build_linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install base dependencies
        run: |
          python3 -m pip install -U pip
          python3 -m pip install -U setuptools wheel
          python3 -m pip install build

      - name: Install package
        run: python3 -m pip install .

      - name: Build distribution
        id: build
        run: |
          wheel="pythumb-${{ needs.prepare.outputs.version }}-py3-none-any.whl"

          python3 setup.py sdist bdist_wheel

          mkdir -p release/
          cp "dist/$wheel" release/

          echo "::set-output name=wheel::$wheel"

      - name: Upload wheel
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: release/${{ steps.build.outputs.wheel }}
          asset_name: ${{ steps.build.outputs.wheel }}
          asset_content_type: application/x-wheel+zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_TOKEN }}
